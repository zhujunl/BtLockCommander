package com.miaxis.btlockcommanderdemo.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.btlockcommanderdemo.util.NbLockCmdDtoConverter;
import java.util.List;

import com.miaxis.btlockcommanderdemo.model.entity.NbCmdDto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NB_CMD_DTO".
*/
public class NbCmdDtoDao extends AbstractDao<NbCmdDto, Long> {

    public static final String TABLENAME = "NB_CMD_DTO";

    /**
     * Properties of entity NbCmdDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SerialNumber = new Property(1, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property LockCmds = new Property(4, String.class, "lockCmds", false, "LOCK_CMDS");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
    }

    private final NbLockCmdDtoConverter lockCmdsConverter = new NbLockCmdDtoConverter();

    public NbCmdDtoDao(DaoConfig config) {
        super(config);
    }
    
    public NbCmdDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NB_CMD_DTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERIAL_NUMBER\" TEXT," + // 1: serialNumber
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"NAME\" TEXT," + // 3: name
                "\"LOCK_CMDS\" TEXT," + // 4: lockCmds
                "\"CREATE_TIME\" INTEGER);"); // 5: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NB_CMD_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NbCmdDto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(2, serialNumber);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        List lockCmds = entity.getLockCmds();
        if (lockCmds != null) {
            stmt.bindString(5, lockCmdsConverter.convertToDatabaseValue(lockCmds));
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NbCmdDto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(2, serialNumber);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        List lockCmds = entity.getLockCmds();
        if (lockCmds != null) {
            stmt.bindString(5, lockCmdsConverter.convertToDatabaseValue(lockCmds));
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NbCmdDto readEntity(Cursor cursor, int offset) {
        NbCmdDto entity = new NbCmdDto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serialNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : lockCmdsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // lockCmds
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NbCmdDto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSerialNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLockCmds(cursor.isNull(offset + 4) ? null : lockCmdsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NbCmdDto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NbCmdDto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NbCmdDto entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
